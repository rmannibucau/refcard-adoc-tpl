= Neo4j Cypher Refcard {neo4j-version} =

*Cypher is the declarative query language for Neo4j, the worldâ€™s leading graph database.*

Key principles and capabilities of Cypher are as follows:


* Cypher matches patterns of nodes and relationship in the graph, to extract information or modify the data.
* Cypher has the concept of identifiers which denote named, bound elements and parameters.
* Cypher can create, update, and remove nodes, relationships, and properties.

++++
<div class="paragraph"><p>You can try cypher snippets live in the Neo4j Console at 
<a href="http://console.neo4j.org" target="_blank">console.neo4j.org</a>
or read the full Cypher documentation at 
<a href="http://docs.neo4j.org" target="_blank">docs.neo4j.org</a>.</p></div>
++++

Note: `{value}` denotes either literals, for ad hoc Cypher queries; or parameters, which is the best practice for applications.

== Syntax ==

.Read Query Structure 
["refcard", cardcss="read c2-2 c3-2 c4-2 c5-2"]
----
START
[MATCH]
[WHERE]
RETURN [ORDER BY] [SKIP] [LIMIT]
----

.Write-Only Query Structure 
["refcard", cardcss="write c2-2 c4-4 c5-4 c6-3"]
----
CREATE [UNIQUE]*
[SET|DELETE|FOREACH]*
[RETURN [ORDER BY] [SKIP] [LIMIT]]
----

.Read-Write Query Structure 
["refcard", cardcss="write c2-2 c4-4 c5-4 c6-3"]
----
START
[MATCH]
[WHERE]
[CREATE [UNIQUE]]*
[SET|DELETE|FOREACH]*
[RETURN [ORDER BY] [SKIP] [LIMIT]]
----

++++
<div class="col cardgeneral c3-2 c6-4"><div class="blk">
++++

[options="header", cols=",m"]
|===
2+| Operators
| Mathematical       | `+`, `-`, `*`, `/`, `%`
| Comparison         | `=`, `<>`, `<`, `>`, `<=`, `>=`
| Boolean            | `AND`, `OR`, `NOT`
| String             | `+`
| Collection         | `+`, `IN`
| Regular Expression | `=~`
| Property           | `?`, `!`
|===

++++
</div></div>
++++

++++
<div class='col cardgeneral c2-2 c3-2 c4-2 c6-2 column'><div class='blk'>
++++

[options="header"]
|====
|Patterns
a|
["source","cypher"]
----
(n)-->(m)
----
A relationship from `n` to `m` exists.
a|
["source","cypher"]
----
(n)--(m)
----
A relationship from `n` to `m` or from `m` to `n` exists.
a|["source","cypher"]
----
(m)<-[:KNOWS]-(n)
----
A relationship from `n` to `m` of type `KNOWS` exists.
a|
["source","cypher"]
----
(n)-[:KNOWS\|LOVES]->(m)
----
A relationship from `n` to `m` of type `KNOWS` or `LOVES` exists.
a|
["source","cypher"]
----
(n)-[r]->(m)
----
Bind an identifier to the relationship.
a|
["source","cypher"]
----
(n)-[r?]->(m)
----
Optional relationship.
a|["source","cypher"]
----
(n)-[*1..5]->(m)
----
Variable length paths.
a|
["source","cypher"]
----
(n)-[*]->(m)
----
Any depth.
a|
["source","cypher"]
----
(n)-[:KNOWS]->(m {property: {value}})
----
Match or set properties in `CREATE` or `CREATE UNIQUE` clauses.
|====

++++
</div></div>
++++


++++
<div class="col cardperformance c2-2 c4-3 c5-5 c6-3"><div class="blk">
++++

[options="header", cols="a"]
|===
|Performance
| 
* Use parameters instead of literals when possible.
  This allows Cypher to re-use your queries instead of having to parse and build new execution plans.
* Avoid using optional relationships.
  Cypher has to employ a much slower pattern matcher when you use optional relationships.
* Always set an upper limit for your variable length relationships.
  It's easy to have a query go wild and touch all nodes in a graph by mistake.
* Return only the data you need.
  Avoid returning whole nodes and relationships -- instead, pick the data you need and return only that.
|===

++++
</div></div>
++++

